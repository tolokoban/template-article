{"version":3,"sources":["view/flexagon/flexagon.tsx","flexagons/flexagons.ts","view/tri-compatibility/tri-compatibility.tsx","view/one-in-common/one-in-common.tsx","page/intro/intro.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["castStringArray","Tfw","Converter","StringArray","castFloat","Double","castUnit","Unit","Flexagon","size","this","props","colors","color","values","A","B","C","D","E","F","c0","c1","length","c2","c3","c4","c5","viewBox","width","height","stroke-linejoin","style","fontWeight","fontFamily","transform","rotate","stroke","fill","d","stroke-width","text-anchor","dominant-baseline","font-size","React","Component","flexagons","i","push","arr1","arr2","filter","item","indexOf","TriCompatibility","refSvg","createRef","x","y","Flexagons","state","highlight","indexToHighlight","svg","current","index","Math","floor","random","nodes","querySelectorAll","k","node","opacity","from","parseInt","getAttribute","to","ang","Calc","toRad","sin","cos","window","setTimeout","gap","lines","flex1","x1","y1","flex2","x2","y2","colorIndex","getColorIndex","path","dash","key","data-from","data-to","stroke-dasharray","stroke-linecap","classes","className","ref","join","renderLines","map","flex","idx","data-id","cursor","onClick","OneInCommon","View","Button","flex0","flex3","flex8","flex9","flex10","flex15","flex4","flex14","flex16","role","aria-label","Intro","href","target","App","Boolean","location","hostname","match","a","Font","loadIndieFlower","ReactDOM","render","StrictMode","document","getElementById","start","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f99a04fb.chunk.js","sourcesContent":["// tslint:disable: no-magic-numbers\nimport Tfw from 'tfw'\nimport React from \"react\"\n\nconst castStringArray = Tfw.Converter.StringArray\nconst castFloat = Tfw.Converter.Double\nconst castUnit = Tfw.Converter.Unit\n\ninterface IFlexagonProps {\n    className?: string\n    color?: string | string[]\n    size?: string\n    rotate?: number\n    values: [number, number, number, number, number, number]\n}\n\nexport default class Flexagon extends React.Component<IFlexagonProps> {\n    render() {\n        const size = castUnit(this.props.size, \"64px\")\n        const colors = castStringArray(this.props.color, [\"#ffd\"])\n        const [A, B, C, D, E, F] = this.props.values\n        const c0 = colors[0] as string\n        const c1 = colors[1 % colors.length] as string\n        const c2 = colors[2 % colors.length] as string\n        const c3 = colors[3 % colors.length] as string\n        const c4 = colors[4 % colors.length] as string\n        const c5 = colors[5 % colors.length] as string\n        return <svg\n            viewBox=\"-110 -110 220 220\"\n            width={size}\n            height={size}\n            stroke-linejoin=\"round\"\n            style={{\n                fontWeight: \"bolder\",\n                fontFamily: \"inherit\"\n            }}\n        >\n            <g transform={`rotate(${castFloat(this.props.rotate, 0) * 60})`}>\n                <g stroke=\"none\">\n                    <path fill={c0} d=\"M0,0L-100,0,-50,87Z\" />\n                    <path fill={c1} d=\"M0,0L-50,87,50,87Z\" />\n                    <path fill={c2} d=\"M0,0L50,87,100,0Z\" />\n                    <path fill={c3} d=\"M0,0L100,0,50,-87Z\" />\n                    <path fill={c4} d=\"M0,0L50,-87,-50,-87Z\" />\n                    <path fill={c5} d=\"M0,0L-50,-87,-100,0Z\" />\n                </g>\n                <g fill=\"none\" stroke=\"none\" stroke-width=\"4\">\n                    <path stroke=\"#000\" d=\"M-100,0 L-50,87,-50,87,0,0 Z\" />\n                    <path fill=\"#0003\" d=\"M-100,0 L-50,87,-50,87,0,0 Z\" />\n                    <path stroke=\"#333\" d=\"M100,0 L50,87,-50,87,0,0 Z\" />\n                    <path fill=\"#0002\" d=\"M100,0 L50,87,-50,87,0,0 Z\" />\n                    <path stroke=\"#666\" d=\"M-100,0 L-50,-87,50,-87,100,0 Z\" />\n                </g>\n                <path stroke=\"#0007\" stroke-width=\"1\" fill=\"none\"\n                    d=\"M-50,-87L50,87 M0,0L50,-87\" />\n                <g stroke=\"none\" fill=\"#000b\" text-anchor=\"middle\" dominant-baseline=\"middle\" font-size=\"30\">\n                    <g transform=\"translate(-50,30) rotate(60)\">\n                        <text>{A}</text>\n                        <path d=\"M-15,15h30\" stroke-width=\"1\" stroke=\"#000\" />\n                    </g>\n                    <g transform=\"translate(0,55) rotate(120)\">\n                        <text>{B}</text>\n                        <path d=\"M-15,15h30\" stroke-width=\"1\" stroke=\"#000\" />\n                    </g>\n                    <g transform=\"translate(50,30) rotate(-60)\">\n                        <text>{C}</text>\n                        <path d=\"M-15,15h30\" stroke-width=\"1\" stroke=\"#000\" />\n                    </g>\n                    <g transform=\"translate(50,-30)\">\n                        <text>{D}</text>\n                        <path d=\"M-15,15h30\" stroke-width=\"1\" stroke=\"#000\" />\n                    </g>\n                    <g transform=\"translate(0,-55) rotate(180)\">\n                        <text>{E}</text>\n                        <path d=\"M-15,15h30\" stroke-width=\"1\" stroke=\"#000\" />\n                    </g>\n                    <g transform=\"translate(-50,-30)\">\n                        <text>{F}</text>\n                        <path d=\"M-15,15h30\" stroke-width=\"1\" stroke=\"#000\" />\n                    </g>\n                </g>\n            </g>\n        </svg>\n    }\n}\n","// tslint:disable: no-magic-numbers\n\nexport default {\n    createTri() {\n        const flexagons: Array<[number, number, number, number, number, number]> = []\n\n        for (let i = 0; i < 18; i++) {\n            if (i % 2 === 0) {\n                flexagons.push([\n                    i,\n                    (i + 7) % 18, (i + 6) % 18,\n                    (i + 13) % 18, (i + 12) % 18, (i + 11) % 18\n                ])\n            } else {\n                flexagons.push([\n                    i,\n                    (i + 11) % 18, (i + 12) % 18,\n                    (i + 5) % 18, (i + 6) % 18, (i + 7) % 18\n                ])\n            }\n        }\n\n        return flexagons\n    },\n\n    intersect<T>(arr1: T[], arr2: T[]): T[] {\n        const NOT_FOUND = -1\n        return arr1.filter(item => arr2.indexOf(item) !== NOT_FOUND)\n    }\n}\n","// tslint:disable: no-magic-numbers\nimport React from \"react\"\nimport Tfw from 'tfw'\nimport Flexagons from '../../flexagons'\n\nimport \"./tri-compatibility.css\"\n\nconst castUnit = Tfw.Converter.Unit\n\ninterface ITriCompatibilityProps {\n    className?: string\n    size?: string\n}\n\nexport default class TriCompatibility extends React.Component<ITriCompatibilityProps> {\n    private readonly refSvg = React.createRef<SVGSVGElement>()\n    private readonly x: number[] = []\n    private readonly y: number[] = []\n    private readonly flexagons = Flexagons.createTri()\n    state = {}\n\n    constructor(props: ITriCompatibilityProps) {\n        super(props)\n        const ANGLE_STEP = 20\n        const RADIUS = 700\n        for (let i = 0; i < this.flexagons.length; i++) {\n            const ang = Tfw.Calc.toRad(i * ANGLE_STEP)\n            this.x.push(RADIUS * Math.sin(ang))\n            this.y.push(-RADIUS * Math.cos(ang))\n        }\n    }\n\n    componentDidMount() {\n        window.setTimeout(this.highlight)\n    }\n\n    getColorIndex(gap: number): number {\n        switch (gap) {\n            case 3: return 0\n            case 15: return 0\n            case 8: return 1\n            case 10: return 1\n            case 9: return 2\n            default: return 0\n        }\n    }\n\n    highlight = (indexToHighlight = -1) => {\n        const svg = this.refSvg.current\n        if (svg === null) return\n        const index =\n            indexToHighlight === -1 ?\n                Math.floor(Math.random() * this.flexagons.length) :\n                indexToHighlight\n        const nodes = svg.querySelectorAll(\"g[data-from]\")\n        for (let k = 0; k < nodes.length; k++) {\n            const node = nodes.item(k) as SVGGElement\n            node.style.opacity = \"1\"\n            const from = parseInt(node.getAttribute(\"data-from\") ?? '', 10)\n            if (from === index) continue\n            const to = parseInt(node.getAttribute(\"data-to\") ?? '', 10)\n            if (to === index) continue\n            node.style.opacity = \"0.1\"\n        }\n    }\n\n    renderLines() {\n        const lines: JSX.Element[] = []\n        const { flexagons } = this\n        const colors = [\"#080\", \"#008\", \"#800\"]\n\n        for (let i = 0; i < flexagons.length; i++) {\n            const flex1 = flexagons[i]\n            const x1 = this.x[i]\n            const y1 = this.y[i]\n\n            for (let k = i + 1; k < flexagons.length; k++) {\n                const flex2 = flexagons[k]\n                const inter = Flexagons.intersect(flex1, flex2)\n                if (inter.length > 0) continue\n                const x2 = this.x[k]\n                const y2 = this.y[k]\n                const colorIndex = this.getColorIndex(k - i)\n                const color = colors[colorIndex]\n                let path = `M${x1},${y1}L${x2},${y2}`\n                if (colorIndex === 0) {\n                    path = `M${x1},${y1}Q0,0,${x2},${y2}`\n                }\n                let dash = \"10 20\"\n                if (i % 2 === 0 && k - i === 3) {\n                    dash = \"none\"\n                } else if (i % 2 === 1 && k - i === 15) {\n                    dash = \"none\"\n                }\n                lines.push(\n                    <g\n                        key={`L${i}/${k}`}\n                        data-from={i}\n                        data-to={k}\n                        stroke-dasharray={dash}\n                        stroke-linecap=\"round\"\n                    >\n                        <path\n                            stroke={color}\n                            stroke-width=\"10\"\n                            d={path} />\n                        <path\n                            stroke=\"#fff7\"\n                            stroke-width=\"5\"\n                            d={path} />\n                    </g>\n                )\n            }\n        }\n        return lines\n    }\n\n    render() {\n        const classes = [\n            'view-TriCompatibility',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const size = castUnit(this.props.size, \"640px\")\n        const color = \"#eee\"\n\n        return <figure>\n            <svg\n                ref={this.refSvg}\n                className={classes.join(\" \")}\n                viewBox=\"-800 -800 1600 1600\"\n                width={size}\n                height={size}\n                stroke-linejoin=\"round\"\n                style={{\n                    fontWeight: \"bolder\",\n                    fontFamily: \"sans-serif\"\n                }}\n            >\n                <g fill=\"none\">\n                    {\n                        this.renderLines()\n                    }\n                </g>\n                {\n                    this.flexagons.map(\n                        (flex: number[], idx: number) => {\n                            const [A, B, C, D, E, F] = flex\n                            const x = this.x[idx]\n                            const y = this.y[idx]\n                            return <g\n                                key={`config-${flex[0]}`}\n                                data-id={idx}\n                                stroke-linejoin=\"round\"\n                                style={{\n                                    cursor: \"pointer\"\n                                }}\n                                onClick={() => {this.highlight(idx)}}\n                                transform={`translate(${x},${y})`}\n                            >\n                                <g fill={color} stroke=\"#000\" stroke-width=\"3\">\n                                    <path stroke=\"#000\" d=\"M-100,0 L-50,87,-50,87,0,0 Z\" />\n                                    <path fill=\"#0004\" stroke=\"none\" d=\"M-100,0 L-50,87,-50,87,0,0 Z\" />\n                                    <path stroke=\"#333\" d=\"M100,0 L50,87,-50,87,0,0 Z\" />\n                                    <path fill=\"#0002\" stroke=\"none\" d=\"M100,0 L50,87,-50,87,0,0 Z\" />\n                                    <path stroke=\"#666\" d=\"M-100,0 L-50,-87,50,-87,100,0 Z\" />\n                                </g>\n                                <g stroke=\"none\" fill=\"#000b\" text-anchor=\"middle\" dominant-baseline=\"middle\" font-size=\"30\">\n                                    <text x=\"-50\" y=\"30\">{A}</text>\n                                    <text x=\"0\" y=\"55\">{B}</text>\n                                    <text x=\"50\" y=\"30\">{C}</text>\n                                    <text x=\"50\" y=\"-30\">{D}</text>\n                                    <text x=\"0\" y=\"-55\">{E}</text>\n                                    <text x=\"-50\" y=\"-30\">{F}</text>\n                                </g>\n                            </g>\n                        }\n                    )\n                }\n            </svg>\n        </figure>\n    }\n}\n","// tslint:disable: no-magic-numbers\nimport React from \"react\"\nimport Tfw from 'tfw'\nimport Flexagons from '../../flexagons'\nimport Flexagon from '../flexagon'\n\nimport \"./one-in-common.css\"\n\nconst Button = Tfw.View.Button\n\ninterface IOneInCommonProps {\n    className?: string | string[]\n}\n\nexport default class OneInCommon extends React.Component<IOneInCommonProps> {\n    private readonly flexagons = Flexagons.createTri()\n    private readonly flex0 = this.flexagons[0]\n    private readonly flex3 = this.flexagons[3]\n    private readonly flex8 = this.flexagons[8]\n    private readonly flex9 = this.flexagons[9]\n    private readonly flex10 = this.flexagons[10]\n    private readonly flex15 = this.flexagons[15]\n\n    private readonly flex2 = this.flexagons[2]\n    private readonly flex4 = this.flexagons[4]\n    private readonly flex14 = this.flexagons[14]\n    private readonly flex16 = this.flexagons[16]\n\n\n    state = {}\n\n    render() {\n        const classes = [\n            'view-OneInCommon',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const size = \"5em\"\n\n        return (<div className={classes.join(' ')}>\n            <div className=\"grid\">\n                <div>&nbsp;</div>\n                <Flexagon values={this.flex2} \n                    color={[\"#dfc\", \"#dfc\", \"#dfc\", \"#dfc\", \"#dfc\", \"#fdc\"]}\n                    size={size} rotate={2}/>\n                <Flexagon values={this.flex4} \n                    color={[\"#dfc\", \"#fdc\", \"#dfc\", \"#dfc\", \"#dfc\", \"#dfc\"]}\n                    size={size} rotate={2}/>\n                <Flexagon values={this.flex14} \n                    color={[\"#dfc\", \"#dfc\", \"#dfc\", \"#dfc\", \"#dfc\", \"#fdc\"]}\n                    size={size} rotate={-2}/>\n                <Flexagon values={this.flex16} \n                    color={[\"#dfc\", \"#dfc\", \"#dfc\", \"#fdc\", \"#dfc\", \"#dfc\"]}\n                    size={size} rotate={-2}/>\n\n                <Flexagon values={this.flex0} color=\"#fdc\" size={size} />\n                <div>13</div><div>11</div><div>7</div><div>11</div>\n\n                <Flexagon values={this.flex3} color=\"#cdf\" size={size} />\n                <div>{Flexagons.intersect(this.flex3, this.flex2).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex3, this.flex4).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex3, this.flex14).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex3, this.flex16).join(\", \")}</div>\n\n                <Flexagon values={this.flex8} color=\"#cdf\" size={size} />\n                <div>{Flexagons.intersect(this.flex8, this.flex2).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex8, this.flex4).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex8, this.flex14).join(\", \")}</div>\n                <div><span role=\"img\" aria-label=\"ok\">👍</span></div>\n\n                <Flexagon values={this.flex9} color=\"#cdf\" size={size} />\n                <div>{Flexagons.intersect(this.flex9, this.flex2).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex9, this.flex4).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex9, this.flex14).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex9, this.flex16).join(\", \")}</div>\n\n                <Flexagon values={this.flex10} color=\"#cdf\" size={size} />\n                <div><span role=\"img\" aria-label=\"ok\">👍</span></div>\n                <div>{Flexagons.intersect(this.flex10, this.flex4).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex10, this.flex14).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex10, this.flex16).join(\", \")}</div>\n\n                <Flexagon values={this.flex15} color=\"#cdf\" size={size} />\n                <div>{Flexagons.intersect(this.flex15, this.flex2).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex15, this.flex4).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex15, this.flex14).join(\", \")}</div>\n                <div>{Flexagons.intersect(this.flex15, this.flex16).join(\", \")}</div>\n            </div>\n        </div>)\n    }\n}\n","// tslint:disable: no-magic-numbers\nimport Tfw from 'tfw'\nimport React from \"react\"\nimport Flexagon from '../../view/flexagon'\nimport Flexagons from '../../flexagons'\nimport TriCompatibility from '../../view/tri-compatibility'\nimport OneInCommon from '../../view/one-in-common'\n\nimport \"./intro.css\"\n\ninterface IIntroProps {\n    className?: string | string[]\n}\n\nexport default class Intro extends React.Component<IIntroProps> {\n    render() {\n        const classes = [\n            'page-Intro',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<section className={classes.join(' ')}>\n            <h1>Tri-Hexa-Flexagons with construction defect</h1>\n            <div className=\"fig\">\n                <p>\n                    <b><a href=\"https://en.wikipedia.org/wiki/Flexagon#Trihexaflexagon\" target=\"wiki\">Tri-Hexa-Flexagons</a></b> are&nbsp;\n                    <a href=\"https://en.wikipedia.org/wiki/M%C3%B6bius_strip\" target=\"wiki\">Möbius strips</a> made of 18 triangles.\n                    They have 3 distinct faces.\n                    But if you don't construct them right, you end up with this:\n                </p>\n                <figure className=\"flexagons\">\n                    {\n                        Flexagons.createTri().map(\n                            values => <Flexagon values={values} size=\"5em\" />\n                        )\n                    }\n                </figure>\n            </div>\n            <div className=\"fig\">\n                <div>\n                    <p>\n                        A <em>good</em> flexagon will be axial-symetrical with a&nbsp;\n                        <code>2-2-2</code> pattern.\n                        Whereas a <em>wrong</em> flexagon has a <code>1-2-3</code> pattern.\n                        The result is that it is now impossible to choose three configurations\n                        that share no triangle.\n                    </p>\n                    <p>\n                        Let's call <b>compatible</b> two configurations with no common\n                        triangle. It turns out that each configuration is compatible with\n                        5 and only 5 other configurations.\n                    </p>\n                    <p>\n                        Lines represent compatibility. If the line is not dashed,\n                        the configurations are both sides of the same hexagon.\n                    </p>\n                </div>\n                <TriCompatibility size=\"30em\" />\n            </div>\n            <div className=\"fig\">\n                <div>\n                    <p>\n                        It seems that the best we can do is to find configuration\n                        with the smallest possible number of common triangles.\n                    </p>\n                    <p>We have two winners:</p>\n                    <div>\n                        <Flexagon values={[0, 7, 6, 13, 12, 11]} color=\"#fdc\" size=\"8em\" />\n                        <Flexagon\n                            values={[16, 5, 4, 11, 10, 9]}\n                            color={[\"#dfc\", \"#dfc\", \"#dfc\", \"#fdc\", \"#dfc\", \"#dfc\"]}\n                            size=\"8em\" />\n                        <Flexagon values={[8, 15, 14, 3, 2, 1]} color=\"#cdf\" size=\"8em\" />\n                    </div>\n                    <div>\n                        <Flexagon values={[0, 7, 6, 13, 12, 11]} color=\"#fdc\" size=\"8em\" />\n                        <Flexagon\n                            values={[2, 9, 8, 15, 14, 13]}\n                            color={[\"#dfc\", \"#dfc\", \"#dfc\", \"#dfc\", \"#dfc\", \"#fdc\"]}\n                            size=\"8em\" />\n                        <Flexagon values={[10, 17, 15, 5, 4, 3]} color=\"#cdf\" size=\"8em\" />\n                    </div>\n                </div>\n                <OneInCommon />\n            </div>\n        </section>)\n    }\n}\n","import React from \"react\"\nimport PageIntro from '../page/intro'\n\nimport \"./App.css\"\n\ninterface IAppProps {\n    className?: string\n}\ninterface IAppState {\n\n}\n\nexport default class App extends React.Component<IAppProps, IAppState> {\n    state = {}\n\n    render() {\n        const classes = ['App']\n        if (typeof this.props.className === 'string') classes.push(this.props.className)\n\n        return (<div className={classes.join(' ')}>\n            <PageIntro />\n        </div>)\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Tfw from 'tfw'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nasync function start() {\n    await Tfw.Font.loadIndieFlower(true)\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>,\n        document.getElementById('root')\n    )\n}\n\nstart()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}